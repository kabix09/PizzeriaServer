<?php
declare(strict_types=1);

namespace Pizzeria\Api;

use Kreait\Firebase\Exception\DatabaseException;
use Pizzeria\Connection\DbConnection;
use Pizzeria\Logger\ClientDataException;
use Pizzeria\Repository\PizzaRepository;
use Pizzeria\Validator\Models\PizzaValidator;
use Pizzeria\Web\Request;

/**
 * Class Pizza
 * @package Pizzeria\Api
 */
final class Pizza extends GenericApi
{
    /**
     * @OA\Schema(
     *  schema="Pizza",
     *  title="Pizza",
     *  required={"name", "ingredients", "price"},
     *  @OA\Property(
     *      property="id",
     *      type="string",
     *      format="uuid",
     *      description="The pizza unique key"
     *  ),
     *  @OA\Property(
     *      property="name",
     *      type="string",
     *      description="The pizza name"
     *  ),
     *  @OA\Property(
     *      property="ingredients",
     *      type="array",
     *      @OA\Items(type="string", format="uuid"),
     *      description="The pizza ingredients list"
     *  ),
     *  @OA\Property(
     *      property="price",
     *      type="integer",
     *      description="The pizza price"
     *  ),
     *  example={
     *     "id": "1706f6d3-d003-48aa-a2d7-8cce76ebd2f7",
     *     "name": "MARGHERITA",
     *     "ingredients": {"1edbfa9a-3339-4cba-b894-1c2c4e947444", "7f091d7a-e891-4d8b-934a-41c9b0be7825" },
     *     "price": 15
     *     }
     * )
     */
    public const SCHEMA = ['id', 'name', 'ingredients', 'price'];

    /** @var PizzaValidator */
    protected $validator;

    /**
     * Pizza constructor.
     */
    public function __construct()
    {
        parent::__construct(new PizzaRepository(new DbConnection()), new PizzaValidator());
    }

    /**
     * @param Request $request
     * @return array
     * @throws DatabaseException
     *
     *  @OA\Get(path="/PizzeriaServer/Api/Pizza", tags={"Pizza"},
     *      @OA\Response(response="200", description="Success",
     *          @OA\JsonContent(
     *              type="array",
     *              @OA\Items(ref="#/components/schemas/Pizza")
     *          )
     *      )
     * )
     *
     *  @OA\Get(path="/PizzeriaServer/Api/Pizza?name={pizzaName}", tags={"Pizza"},
     *      @OA\Parameter(
     *          name="pizzaName",
     *          in="path",
     *          @OA\Schema(type="string")
     *      ),
     *      @OA\Response(response="200", description="Success",
     *          @OA\MediaType(
     *              mediaType="application/json",
     *              @OA\Schema(ref="#/components/schemas/Pizza")
     *          )
     *      ),
     *      @OA\Response(response="400", description="Bad Request",
     *          @OA\MediaType(
     *              mediaType="application/json",
     *              @OA\Schema(ref="#/components/schemas/Error"),
     *              @OA\Examples(example="InvalidName", value={"message": "nonexistent pizza name: 'SAMPLE_PIZZA'"}, summary="Invalid name")
     *          )
     *      )
     *  )
     */
    public function get(Request $request): array
    {
        return parent::get($request); // TODO: Change the autogenerated stub
    }

    /**
     * @param Request $request
     * @return array
     * @throws DatabaseException
     *
     *  @OA\Post(path="/PizzeriaServer/Api/Pizza", tags={"Pizza"},
     *     @OA\RequestBody(
     *         required=true,
     *         @OA\MediaType(
     *             mediaType="application/json",
     *             @OA\Schema(ref="#/components/schemas/Pizza")
     *         )
     *     ),
     *     @OA\Response(response="200", description="Success",
     *         @OA\MediaType(
     *             mediaType="application/json",
     *             @OA\Schema(ref="#/components/schemas/Pizza")
     *         )
     *     ),
     *     @OA\Response(response="400", description="Not Found",
     *         @OA\MediaType(
     *              mediaType="application/json",
     *              @OA\Schema(ref="#/components/schemas/Error"),
     *              @OA\Examples(example="MissingProperty", value={"message":"missing pizza property: 'SAMPLE_PROPERTY'"}, summary="Missing property"),
     *              @OA\Examples(example="NonexistentElement", value={"message":"this ingredient don't exists: 'SAMPLE_INGREDIENT'"}, summary="Nonexistent element"),
     *              @OA\Examples(example="InvalidPrice", value={"message":"miscalculated price: 'SAMPLE_PRICE'"}, summary="Invalid price")
     *         )
     *     )
     * )
     */
    public function post(Request $request): array
    {
        return parent::post($request); // TODO: Change the autogenerated stub
    }

    /**
     * @param Request $request
     * @return array
     * @throws DatabaseException
     *
     * @OA\Put(path="/PizzeriaServer/Api/Pizza", tags={"Pizza"},
     *     @OA\RequestBody(
     *         required=true,
     *         @OA\MediaType(
     *             mediaType="application/json",
     *             @OA\Schema(ref="#/components/schemas/Pizza")
     *         )
     *     ),
     *     @OA\Response(response="200", description="Success",
     *         @OA\MediaType(
     *             mediaType="application/json",
     *             @OA\Schema(ref="#/components/schemas/Pizza")
     *         )
     *     ),
     *     @OA\Response(response="400", description="Not Found",
     *         @OA\MediaType(
     *              mediaType="application/json",
     *              @OA\Schema(ref="#/components/schemas/Error"),
     *              @OA\Examples(example="MissingProperty", value={"message":"missing pizza property: 'SAMPLE_PROPERTY'"}, summary="Missing property"),
     *              @OA\Examples(example="NonexistentElement", value={"message":"this ingredient don't exists: 'SAMPLE_INGREDIENT'"}, summary="Nonexistent element"),
     *         )
     *     )
     * )
     */
    public function put(Request $request): array
    {
        return parent::put($request); // TODO: Change the autogenerated stub
    }

    /**
     * @param Request $request
     * @return bool
     * @throws DatabaseException
     * @throws ClientDataException
     *
     * @OA\Delete(path="/PizzeriaServer/Api/Pizza", tags={"Pizza"},
     *     @OA\RequestBody(
     *         required=true,
     *         @OA\MediaType(
     *             mediaType="application/json",
     *             @OA\Schema(
     *                 required={"id"},
     *                 @OA\Property(property="id", type="string", format="uuid", example="1706f6d3-d003-48aa-a2d7-8cce76ebd2f7")
     *             )
     *         )
     *     ),
     *     @OA\Response(response="200", description="Success",
     *         @OA\MediaType(
     *             mediaType="application/json",
     *             @OA\Schema(
     *                 required={"id"},
     *                 @OA\Property(property="id", type="string", format="uuid", example="1706f6d3-d003-48aa-a2d7-8cce76ebd2f7")
     *             )
     *         )
     *     ),
     *     @OA\Response(response="400", description="Not Found",
     *         @OA\MediaType(
     *              mediaType="application/json",
     *              @OA\Schema(ref="#/components/schemas/Error"),
     *              @OA\Examples(example="MissingId", value={"message":"missing pizza id property"}, summary="Missing id"),
     *              @OA\Examples(example="InvalidId", value={"message":"nonexistent pizza id: 'SAMPLE_PIZZA_ID'"}, summary="Invalid id"),
     *         )
     *     )
     * )
     */
    public function delete(Request $request): array
    {
        return parent::delete($request); // TODO: Change the autogenerated stub
    }
}
